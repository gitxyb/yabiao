安装包及手册下载。
历史版本删除
安装
测试：
    django项目（工程）
        django-admin.py startproject 工程名
       # tree
        .
        ├── manage.py
        └── web01
            ├── __init__.py
            ├── settings.py
            ├── urls.py
            └── wsgi.py
    创建应用(在工程目录中)：
        python manger.py startapp appname
        # tree blog
        blog
        ├── __init__.py
        ├── models.py
        ├── tests.py
        └── views.py
    测试：
    运行开发服务器：
    python manager.py runserver 0.0.0.0:8000

django工作流程
    1 url请求  ---- urls.py
       url（r'url re模板'， 处理方法）
    2 将请求信息（封装的请求对象） 分发 到指定的视图处理方法（作为第一个参数传递）。
    3 处理结果以HttpResponse对象返回
    4 视图处理方法的正确位置。

模板
数据库


模板----app逻辑 显示（web）分离


注册应用

模板文件的位置：
	默认：app/templates

django shell使用：
		
		ipython manage.py shell
		python	manage.py shell		django下的解释器环境

获取模板文件的对象：
	from django.template import Context,loader
	t = loader.get_tempalte(模板名)
	c = Context()
	c['title'] = 'aaaaa'
	s = t.render(c)
index.html
	{{title}}


from django.shortcuts import render_to_response
	4 件事


模板变量使用：

	基本变量：str,number,boolean

	复合类型：list,tuple,dict,object

		list,tuple

	模板中：序列类型---循环使用	（for标签的使用）
	
模板标签：	{% for 变量 in 模板序列变量 %}
			{{变量}}
		{% endfor %}


静态资源的加载（img,media,js,css）

模板不能直接加载

静态文件的位置：
		app/static

静态文件的访问：
		url/static/静态资源

		static/静态资源 和 urls.py 不冲突！！系统设定（约定）

数据库的使用：

		settings.py配置db

		sqlite3数据库

		apps
		app/models.py
		   class Picture ------ db table
		   类属性----- 	db table 字段
		syncdb
		修改url.py
		新建admin.py
		url后台管理
			添加数据
		数据查看：
			sqlite3 文件名
			.tables
			.schema
Picture.object.all()



url(urlconfig):

url(r'')

url的get参数：
	req.GET['key']

Picture.object.get(id=1)



表单的使用：

url中的表单参数，get方法参数，<a href="">
	<from action= method= >
	<input name= />
		action
		method
		name

	a标签href属性放置参数

	出于安全性考虑 ：
		url路径参数：
				1、位置参数
				2、关键字参数
				3、默认参数
表单上传：post

	post与get的区别：
		http协议：
		数据包
		http头信息：信封的内容。（get信息在http头，表现在浏览器url地址栏里。）（优点：简便，书签方式保存。缺点：不安全，限制大小。）
		http体信息：信纸的内容。（post方式信息在http体中，在浏览器url地址栏不体现。）

(更改后台数据的用POST，不修改用GET)


form模板文件：
访问/register/
	get:显示提交界面；
	注册按钮--post,提交数据；

	csrf解决：1、表单后加{% csrf_token %}
		 2、settings.py禁用csrf一项

model单表操作：
	导入对应的models类对象
		增加：
			1、User.objects.create(username="……"，passwd="……")
			2、生成对象，利用对象的字段属性。
				user=User()
				user.username = 'alen'
				user.password = '1111'
				user.save()
			3、user=User(username='alen',password='1111')
				user.save()

		  查：
			全查询
			User.objects.all()
			users.count()
			过滤查询
			users=User.objects.filter(查询条件)
			查询条件：
			字段名__查询条件：'值'
			exact	
			iexact	不区分大小写
			包含：
			字段名__包含条件：
				contains
			是否在库里：
				in
				gt
				gte
				lt
				lte
				startswith
				istartswith
				endswith
				year
				month
				day
		单击路查询：
			get（）
			User.objects.get()


*********************
文件的上传处理：
    html：
	method="post"
	enctype="multipart/form-data"
	type="file" name="img"
    server:
	req.FILES['img'](获取得到的结果是一个文件对象：UploadedFile)(属性：name 、size.方法：chunks、read)

*********************

记录对象的修改：
	方法一(单记录修改)：
		记录对象，修改字段的属性值，save()
	方法二（多记录修改）：
		结果集，update()
		all(),filter,exclude

记录的删除：
	单记录（对象）、多记录（结果集）---------delete(）





表间关系：
	one to one:
		from django.contrib.auth.models import User
		若想扩展User表：
			OneToOneField

	one to many：
		models.ForeignKey(models类)
	添加：
		标准方式：	Replay.objects.create(content="……"，post=实例对象)
		利用表间关系特点：	一方：属性：多方_set.create(content="……")		
	查询：
		利用表间关系：	一方：属性：多方_set. 查找:all()  get()   filter()  count()(统计)
				多方：那一个一方
				     post属性对象---Post实例对象
				     post_id
	many to many:
		主  附：many to many (ManyToManyField)
		

		附表中操作：
		附表中添加主表记录：
			book添加author记录
				1、add （）纯粹的添加；添加已有的作者；
				2、create （）通过新建用户，添加；
			book中移除作者：
				1、remove(对象);
				2、clear();
			book中的作者的查询：
				b1.author.all\get\filter\exclude
				
		主表中操作：
			自动添加属性：book_set
				操作同上。

模板：

	模板内容：
		html、css、js;
		模板变量{{变量名}}；
		模板标签
			{%for%}、
			{%if 表达式%}
				成真部分
			{%else%}
				成假部分
			{%endif%}
			{%endfor%}
			
				if 表达式
					表达式可进行bool运算(逻辑运算)：and\or\not
					关系运算：==，！=，<，>，<=，>=，in


			过滤器：
				模板变量  |  filter名称:"参数"

			模板对象的产生：
				t = Template("html代码,标签,变量")



	模板的加载：
			{% include "模板文件名" %}
		
	模板的继承：
			{% block 块名%}
			块内容
			{% endblock %}

			{% extends '父模板文件名'%}

**********************
Mark  Down	编辑器*
**********************




form对象：

1. Display an HTML form with automatically generated form widgets.
	自动生成组件
2. Check submitted data against a set of validation rules.
	自动检查数据有效性
3. Redisplay a form in the case of validation errors.
	数据验证失败，自动回显
4. Convert submitted form data to the relevant Python data types.
	表单数据自动转换为python数据类型

def regist(req):
 14     if req.method == "POST":
 15         uf = UserForm(req.POST)
 16         if uf.is_valid():   #valid验证
 17             print uf.cleaned_data   #收集到的数据
 18             return HttpResponse('ok')
 19     
 20     else:
 21         uf = UserForm()
 22     return render(req,'regist.html',{'uf':uf})




form表单对象：
	参数：
		widget = 定义表单类型	PasswordInput
		choices : ChoiceField,
		required:False,----> None
		label
		initial
		help_text
		error_messages
		validators

form表单用model表示：（ModelForm）
   class UserForm(forms.ModelForm):

	repassword = forms.CharField()

	class Meta:
		model = User
		fields = ('username','password')
		widgets = {'password':forms.PasswordInput()}

	Form对象的特性：
		绑定： uf = UserForm(req.POST,req.FILES)

		验证： uf.is_valid()

		提取数据:uf.cleand_data

	Model对象的特性：
		uf.instance.password
		

例1：
  1 from django.shortcuts import render,render_to_response
  2 from django.forms import ModelForm
  3 from blog.models import UserRegist
  4 
  5 class UserForm(ModelForm):
  6     class Meta:
  7         model = UserRegist
  8         
  9 def regist(req):
 10     if req.method == 'POST':
 11         uf = UserForm()
 12         if uf.is_valid():
 13             return HttpResponse('ok')
 14     else:   
 15         uf = UserForm()
 16     return render(req,'regist.html',{'uf':uf})

例2：
  1 from django.shortcuts import render,render_to_response
  2 from django.http import HttpResponse
  3 from django.forms import ModelForm,PasswordInput
  4 from blog.models import UserRegist
  5 import hashlib
  6 
  7 class UserForm(ModelForm):
  8     class Meta:
  9         model = UserRegist
 10         fields = ('username','password','email')
 11         widgets = {
 12                 'password':PasswordInput()
 13         }
 14 
 15 def regist(req):
 16     if req.method == 'POST':
 17         uf = UserForm(req.POST,req.FILES)
 18         if uf.is_valid():
 19             passwd = uf.cleaned_data['password']
 20         #   print uf.instance.password,dir(uf.instance)	(instance表示model对象，来获取属性)
 21             uf.instance.password = hashlib.sha1(passwd).hexdigest()		（通过对值的修改）
 22             uf.save()					（保存到数据库中）
 23             return HttpResponse('ok')
 24     else:
 25         uf = UserForm()
 26     return render(req,'regist.html',{'uf':uf})




会话机制：

	注册 ------ 登录 ------ 用户页面 ------- 注销

	http无记忆状态。
	解决思路：
		需要记忆的内容---保存
		保存的位置：
			1、	需要记忆的内容保存在浏览器中-----cookie
			2、	保存在server中，------ session

请求 ---------- 相应：
Cookie:
例1：
 40 def login(req):
 41     if req.method == 'POST':
 42         uf = UserFormLogin(req.POST,req.FILES)
 43         if uf.is_valid():
 44             username = uf.cleaned_data['username']
 45             passwd = uf.cleaned_data['password']
 46             password = hashlib.sha1(passwd).hexdigest()
 47             try:
 48                 UserRegist.objects.get(username__exact=username,password__exact=password)
 49                 response = HttpResponseRedirect('/index/')
 50                 response.set_cookie('username',value=username,max_age=300)
 51                 return response
 52             except ObjectDoesNotExist:
 53                 return HttpResponseRedirect('/login/')
 54     else:
 55         uf = UserFormLogin()
 56     return render(req,'login.html',{'uf':uf})
 57 
 58 def index(req):
 59     return HttpResponse('welcome to %s' % req.COOKIES['username'])

设置Cookie
获取Cookie
清楚Cookie

cookie不足：
	1、安全性；
	2、大小、数量；
	3、表现形式；（字符串）


会话机制2：
session：

	保存在server端；
	用户和server:标识；
	个个页面间共享httpRequest.session

前置工作：
	1、数据库的支持；
	2、'django.contrib.sessions.middleware.SessionMiddleware'中间键支持；
	3、 'django.contrib.sessions'；


用户管理：:wq
	from django.contirb.auth.models import User
用户的创建：
	ul = User.objects.create_user()

口令的修改：
	ul.set_password(new password)







表的附加信息：

Ajax:
	AJAX 指异步 JavaScript 及 XML（Asynchronous JavaScript And XML）
同步（tcp） VS 异步（udp）：
	并行 与 串行：通过 AJAX，你可以创建更好、更快以及更友好的 WEB 应用程序。


ajax工作原理：
B ------- S
	1 生成ajax对象：
		hr.XMLHttpRequest()
	2 确定：发给谁？ url 发送方式get post,是否异步
		hr.open('post','/login/','true')
	3 完成onreadystatechange事件处理
		hr.onreadystatechange = process
	4 进行数据发送 hr.send()

	5 相应数据接受：hr.responseText()



django的部署：
	Apache wsgi 安装



Apache web服务器（生产服务器）:
	配置基本服务： 
  1 LoadModule wsgi_module modules/mod_wsgi.so
  2 
  3 
  4 
  5 WSGIScriptAlias / /web21/web21/wsgi.py
  6 WSGIPythonPath /web21
  7 
  8 <Directory /web21/web21>
  9 <Files wsgi.py>
 10 Order deny,allow
 11 Allow from all
 12 </Files>
 13 </Directory>
 14 
 15 Alias /static/ /web21/static/
 16 
 17 
 18 <Directory /web21/static>
 19 Order deny,allow
 20 Allow from all
 21 </Directory>

	配置静态文件：
		设定静态文件目录：
			settings.py:
				STATIC_ROOT=""
		收集静态文件（收集应用的静态文件）：
			python manager.py collectstatic



关掉调试信息：
  3 DEBUG = True
  4 #DEBUG = False

重写404（文件没找到），500（内部错误）错误
	templates/404.html，500.html
	



语言环境：

	settings.py:
		TIME_ZONE = 'Asia/Shanghai'
		LANGUAGE_CODE = 'zh-cn'







Json

JSON 语法是 JavaScript 对象表示法语法的子集		 数组----就是对象

    * 数据在名称/值对中
    * 数据由逗号分隔
    * 花括号保存对象
    * 方括号保存数组

JSON 名称/值对:
	key字段名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：

		JSON 值可以是：

   			* 数字（整数或浮点数）
    			* 字符串（在双引号中）
    			* 逻辑值（true 或 false）
   			* 数组（在方括号中）
    			* 对象（在花括号中）
    			* null

JSON 数组

JSON 数组在方括号中书写：

数组可包含多个对象：
	
	{
		"employees": [
		{ "firstName":"John" , "lastName":"Doe" },
		{ "firstName":"Anna" , "lastName":"Smith" },
		{ "firstName":"Peter" , "lastName":"Jones" }
		]
	}




JSON 使用 JavaScript 语法

因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。

通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：



var employees = [
{ "firstName":"Bill" , "lastName":"Gates" },
{ "firstName":"George" , "lastName":"Bush" },
{ "firstName":"Thomas" , "lastName": "Carter" }
];
employees[0].lastName;



JSON 文件

    * JSON 文件的文件类型是 ".json"

Json文本：
	
	var txt = '{ "employees" : [' +
'{ "firstName":"Bill" , "lastName":"Gates" },' +
'{ "firstName":"George" , "lastName":"Bush" },' +
'{ "firstName":"Thomas" , "lastName":"Carter" } ]}';

var obj = eval("("+ txt +")")

setInterval()


Git

github

~/.ssh

执行 ssh-keygen -t rsa -C "邮箱"

内容复制：～/.ssh/id_rsa.pub



git clone https://github.com/gitxyb/xyb.git 抓取git里提供的资源

（git@github.com:gitxyb/xyb.git）

生成xyb目录

	.git/
	README.md


添加文件：
	vim f1

	git add f1

	git commit -m "信息"

	git remote add origin git@github.com:gitxyb/xyb.git 只做一次

	git push origin master







